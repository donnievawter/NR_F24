[
    {
        "id": "86234d68f0551624",
        "type": "tab",
        "label": "F24",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b5e95fcc23cd134",
        "type": "tab",
        "label": "Generate Flow Files",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08e70aa346915575",
        "type": "server",
        "name": "Home Assistant",
        "version": 2,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30"
    },
    {
        "id": "365132b6c7a63359",
        "type": "catch",
        "z": "86234d68f0551624",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 960,
        "y": 540,
        "wires": [
            [
                "d4a9d0d7ff732471",
                "fa08af06dccdbf38"
            ]
        ]
    },
    {
        "id": "d4a9d0d7ff732471",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 560,
        "wires": []
    },
    {
        "id": "76700d7db1da7d87",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24Tracked",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "f24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "aircraft"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "aircraft.length",
        "stateType": "global",
        "attributes": [
            {
                "property": "maxDistance",
                "value": "maxDistance",
                "valueType": "global"
            },
            {
                "property": "minDistance",
                "value": "minDistance",
                "valueType": "global"
            },
            {
                "property": "minAltitude",
                "value": "minAltitude",
                "valueType": "global"
            },
            {
                "property": "maxAltitude",
                "value": "maxAltitude",
                "valueType": "global"
            },
            {
                "property": "latitude",
                "value": "latitude",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "longitude",
                "valueType": "global"
            },
            {
                "property": "total",
                "value": "#:(file)::totalaircraft",
                "valueType": "global"
            },
            {
                "property": "grandtotal",
                "value": "#:(file)::grandtotalaircraft",
                "valueType": "global"
            },
            {
                "property": "maxid",
                "value": "maxid",
                "valueType": "global"
            },
            {
                "property": "minid",
                "value": "minid",
                "valueType": "global"
            },
            {
                "property": "maxaltid",
                "value": "maxaltid",
                "valueType": "global"
            },
            {
                "property": "minaltid",
                "value": "minaltid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 830,
        "y": 910,
        "wires": [
            [
                "1d002e8712b7dc92"
            ]
        ]
    },
    {
        "id": "56b081c1f900419d",
        "type": "inject",
        "z": "86234d68f0551624",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "emptystring",
        "payloadType": "str",
        "x": 550,
        "y": 880,
        "wires": [
            [
                "14d879b3abc03224"
            ]
        ]
    },
    {
        "id": "921b980860da849b",
        "type": "delay",
        "z": "86234d68f0551624",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 700,
        "wires": [
            [
                "14d879b3abc03224"
            ]
        ]
    },
    {
        "id": "5964b9c24ffd8caa",
        "type": "inject",
        "z": "86234d68f0551624",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 1050,
        "wires": [
            [
                "7e2e435c2a7cb822"
            ]
        ]
    },
    {
        "id": "96a3923d49557d91",
        "type": "function",
        "z": "86234d68f0551624",
        "name": "Reset globals",
        "func": "\n\nglobal.set(\"minlatitude\",0);\nglobal.set(\"minlongitude\",0);\nglobal.set(\"latitude\",0);\nglobal.set(\"longitude\",0);\nglobal.set(\"minAltitude\",40000);\nglobal.set(\"maxAltitude\",0);\nglobal.set(\"maxDistance\",0);\nglobal.set(\"minDistance\",200);\nglobal.set(\"types\",[]);\nglobal.set(\"counts\",undefined);\nglobal.set(\"totalaircraft\",0,\"file\");\nglobal.set(\"northlat\",33);\nglobal.set(\"northlon\",-105);\nglobal.set(\"southlat\",44);\nglobal.set(\"northlon\",-105);\nglobal.set(\"eastlat\",39);\nglobal.set(\"eastlon\",-112);\nglobal.set(\"westlat\",39);\nglobal.set(\"westlon\",-95);\nglobal.set(\"westid\",\"\");\nglobal.set(\"eastid\",\"\");\nglobal.set(\"northid\",\"\");\nglobal.set(\"southid\",\"\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 770,
        "wires": [
            [
                "14d879b3abc03224"
            ]
        ]
    },
    {
        "id": "259598b0c4001a97",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24Maxdistance",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "f24maxdistance"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "maxDistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "latitude",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "longitude",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "maxid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1390,
        "y": 820,
        "wires": [
            [
                "76700d7db1da7d87"
            ]
        ]
    },
    {
        "id": "b0286e855794d84a",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24MinAltitude",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "f24minaltitude"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "feet"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "minAltitude",
        "stateType": "global",
        "attributes": [
            {
                "property": "id",
                "value": "minaltid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 993.3333333333334,
        "y": 820,
        "wires": [
            [
                "4c7eff6017eff74c"
            ]
        ]
    },
    {
        "id": "14d879b3abc03224",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24MaxAltitude",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "f24maxaltitude"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "feet"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "maxAltitude",
        "stateType": "global",
        "attributes": [
            {
                "property": "id",
                "value": "maxaltid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 800,
        "y": 820,
        "wires": [
            [
                "b0286e855794d84a"
            ]
        ]
    },
    {
        "id": "6bce7acff41f71a8",
        "type": "switch",
        "z": "86234d68f0551624",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "(STA|CHANGED|ID|AIR)(.)*",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1123.3333333333333,
        "y": 420,
        "wires": [
            [
                "17be0c2511ac160e"
            ]
        ]
    },
    {
        "id": "17be0c2511ac160e",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 420,
        "wires": []
    },
    {
        "id": "4c7eff6017eff74c",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24Mindistance",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "Cf24mindistance"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "minDistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "minlatitude",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "minlongitude",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "minid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1186.6666666666667,
        "y": 820,
        "wires": [
            [
                "259598b0c4001a97"
            ]
        ]
    },
    {
        "id": "1d002e8712b7dc92",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "Marker for home",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "Homemarker"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:home"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "0",
        "stateType": "num",
        "attributes": [
            {
                "property": "latitude",
                "value": "38.0056",
                "valueType": "num"
            },
            {
                "property": "longitude",
                "value": "-105.361",
                "valueType": "num"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1050,
        "y": 910,
        "wires": [
            [
                "b91f8f1d1040b73e"
            ]
        ]
    },
    {
        "id": "b91f8f1d1040b73e",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "Northern Point",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "NF24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "northdistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "northlat",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "northlon",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "northid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1280,
        "y": 910,
        "wires": [
            [
                "5ac752495c8d2729"
            ]
        ]
    },
    {
        "id": "5ac752495c8d2729",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "Southern Point",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "SF24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "southdistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "southlat",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "southlon",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "southid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1500,
        "y": 910,
        "wires": [
            [
                "6e684a9724c60c83"
            ]
        ]
    },
    {
        "id": "6e684a9724c60c83",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "WestPoint",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "WF24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "westdistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "westlat",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "westlon",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "westid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 870,
        "y": 1000,
        "wires": [
            [
                "25935976f749d6e0"
            ]
        ]
    },
    {
        "id": "25935976f749d6e0",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "Eastern Point",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "EF24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": "miles"
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "eastdistance",
        "stateType": "global",
        "attributes": [
            {
                "property": "latitude",
                "value": "eastlat",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "eastlon",
                "valueType": "global"
            },
            {
                "property": "id",
                "value": "eastid",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1120,
        "y": 1000,
        "wires": [
            [
                "921b980860da849b"
            ]
        ]
    },
    {
        "id": "51bed66310458653",
        "type": "tcp in",
        "z": "86234d68f0551624",
        "name": "",
        "server": "client",
        "host": "pif24.lan",
        "port": "30003",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "base64": false,
        "x": 570,
        "y": 420,
        "wires": [
            [
                "da1e2904ccc9a40b"
            ]
        ]
    },
    {
        "id": "7e2e435c2a7cb822",
        "type": "function",
        "z": "86234d68f0551624",
        "name": "Global distance calculation",
        "func": "getDistance = (ilat2,ilon2)=>{  \n  const deg2rad=(deg) => deg * (Math.PI/180);\n  const  getDistanceFromLatLon = (lat1,lon1,lat2,lon2)=> {\n    const  R = 6371*0.621371; // Radius of the earth in miles\n  // msg.R=R;\n   const dLat = deg2rad(lat2-lat1);  // deg2rad below\n  // msg.dLat=dLat;\n   const  dLon = deg2rad(lon2-lon1); \n  // msg.dLon=dLon;\n   const a =  Math.sin(dLat/2) * Math.sin(dLat/2) +  Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *   Math.sin(dLon/2) * Math.sin(dLon/2)  ; \n//msg.a=a;\nconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n//msg.c=c;\nreturn Math.round(R * c); \n   }\nconst ilat1=38.0056;\nconst ilon1=-105.361;\nreturn getDistanceFromLatLon(ilat1,ilon1,ilat2,ilon2)\n}\n\nglobal.set(\"getDistance\",getDistance,\"file\");\n\n\nmsg.payload=global.get(\"getDistance\",\"file\")(38,-105);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1050,
        "wires": [
            []
        ]
    },
    {
        "id": "da1e2904ccc9a40b",
        "type": "function",
        "z": "86234d68f0551624",
        "name": "parse feed",
        "func": "const choices = [\"MSG\", \"SEL\", \"ID\", \"AIR\", \"STA\", \"CLK\"];\nconst counts = {\n    \"MSG\": 0,\n    \"SEL\": 0,\n    \"ID\": 0,\n    \"AIR\": 0,\n    \"STA\": 0,\n    \"CLK\": 0\n}\nlet st = [];\nconst status = {}\n\nlet newPayload = \"\";\nlet accum = global.get(\"counts\") || counts;\nmsg.data = [];\nconst onlyUnique = (value, index, self) => self.indexOf(value) === index;\nif( typeof msg.payload==='string'){\n    let b = msg.payload.split(\"\\n\");\nfor (const element of b) {\n    let a = element.split(\",\");\n    if (a[0] === 'ID') {\n        let oldSign = a[4];\n        let newSign = a[10];\n        let ac = global.get(\"aircraft\");\n        let i = ac.indexOf(oldSign);\n        newPayload = a[4] + '<>' + a[10];\n        if (i >= 0) {\n            let cs = global.get(\"callsigns\") || {};\n            cs[oldSign] = newSign;\n            global.set(\"callsigns\", cs);\n            newPayload = \"CHANGED\" + newPayload;\n        }\n    }\n    if (a[0] === \"AIR\") {\n        let aircraft = global.get(\"aircraft\") || [];\n        aircraft.push(a[4]);\n        let ac = aircraft.filter(onlyUnique);\n        global.set(\"aircraft\", ac);\n        newPayload = \"AIR >\" + a[4] + \"< \" + a.length + \" \" + a;\n        let total = global.get(\"totalaircraft\", \"file\") || 0;\n        let grandtotal = global.get(\"grandtotalaircraft\", \"file\") || 0;\n        total++;\n        grandtotal++;\n        global.set(\"totalaircraft\", total, \"file\");\n        global.set(\"grandtotalaircraft\", grandtotal, \"file\");\n    }\n    if ((a[0] === \"STA\")) {\n        let aircraft = global.get(\"aircraft\") || [];\n        newPayload = a[4];\n        let i = aircraft.indexOf(a[4]);\n        if (i >= 0) {\n            let removed = global.get(\"removed\") || [];\n            removed.push(a[4]);\n            global.set(\"removed\", removed);\n            aircraft.splice(i, 1);\n            global.set(\"aircraft\", aircraft);\n            newPayload = a[0] + a[4] + \" removed \" + aircraft.length + \" remaining\";\n        } else {\n            newPayload = a[0] + \">\" + a[4] + \"< not found with STA of >\" + a[10] + \"<\" + a;\n        }\n        let callsigns = global.get(\"callsigns\") || {};\n        delete callsigns[a[4]];\n        global.set(\"callsigns\", callsigns);\n    }\n    if ((a[0] === \"MSG\") && (a[1] == 3)) {\n        let lat = parseFloat(a[14]);\n        let lon = parseFloat(a[15]);\n        if ((lon < (-99)) && (lon > (-110)) && (lat > 33) && (lat < 43)) {\n            let callsigns = global.get(\"callsigns\") || {};\n            let distance = global.get(\"getDistance\", \"file\")(lat, lon);\n            let maxDistance = global.get(\"maxDistance\") || 0;\n            let minDistance = global.get(\"minDistance\") || 200;\n            let northlat = global.get(\"northlat\") || 0;\n            let southlat = global.get(\"southlat\") || 44;\n            let eastlon = global.get(\"eastlon\") || -111;\n            let westlon = global.get(\"westlon\") || -99;\n            if (lat > northlat) {\n                global.set(\"northlat\", lat);\n                global.set(\"northlon\", lon);\n                global.set(\"northdistance\", distance);\n                if (callsigns[a[4]]) {\n                    global.set(\"northid\", callsigns[a[4]]);\n                } else {\n                    global.set(\"northid\", a[4]);\n                }\n            }\n            if (lat < southlat) {\n                global.set(\"southlat\", lat);\n                global.set(\"southlon\", lon);\n                global.set(\"southdistance\", distance);\n                if (callsigns[a[4]]) {\n                    global.set(\"southid\", callsigns[a[4]]);\n                } else {\n                    global.set(\"southid\", a[4]);\n                }\n            }\n            if (lon > eastlon) {\n                global.set(\"eastlat\", lat);\n                global.set(\"eastlon\", lon);\n                global.set(\"eastdistance\", distance);\n                if (callsigns[a[4]]) {\n                    global.set(\"eastid\", callsigns[a[4]]);\n                } else {\n                    global.set(\"eastid\", a[4]);\n                }\n            }\n            if (lon < westlon) {\n                global.set(\"westlat\", lat);\n                global.set(\"westlon\", lon);\n                global.set(\"westdistance\", distance);\n                if (callsigns[a[4]]) {\n                    global.set(\"westid\", callsigns[a[4]]);\n                } else {\n                    global.set(\"westid\", a[4]);\n                }\n            }\n            if (distance > maxDistance) {\n                global.set(\"maxDistance\", distance);\n                global.set(\"latitude\", a[14]);\n                global.set(\"longitude\", a[15]);\n                let cs = global.get(\"callsigns\") || {};\n                if (cs[a[4]]) {\n                    global.set(\"maxid\", cs[a[4]]);\n                } else {\n                    global.set(\"maxid\", a[4]);\n                }\n            }\n            if (distance < minDistance) {\n                global.set(\"minDistance\", distance);\n                global.set(\"minlatitude\", lat);\n                global.set(\"minlongitude\", lon);\n                let cs = global.get(\"callsigns\") || {};\n                if (cs[a[4]]) {\n                    global.set(\"minid\", cs[a[4]]);\n                } else {\n                    global.set(\"minid\", a[4]);\n                }\n            }\n            let latsfound = global.get(\"latsfound\") || 0;\n            global.set(\"latsfound\", ++latsfound);\n        } else {\n            newPayload = a[14] + \" \" + a[15] + \" out of range\";\n        }\n    }\n    if ((a[0] === \"MSG\") && (a[1] == 5)) {\n        let altitude = parseInt(a[11]);\n        msg.typeof = typeof (altitude);\n        if (altitude < 0) {\n            altitude = 0;\n        }\n        let maxAltitude = global.get(\"maxAltitude\") || 0;\n        let minAltitude = global.get(\"minAltitude\") || 40000;\n        if (altitude > maxAltitude) {\n            global.set(\"maxAltitude\", altitude);\n            let cs = global.get(\"callsigns\") || {};\n            if (cs[a[4]]) {\n                global.set(\"maxaltid\", cs[a[4]]);\n            } else {\n                global.set(\"maxaltid\", a[4]);\n            }\n        }\n        if (altitude < minAltitude) {\n            global.set(\"minAltitude\", altitude);\n            let cs = global.get(\"callsigns\") || {};\n            if (cs[a[4]]) {\n                global.set(\"minaltid\", cs[a[4]]);\n            } else {\n                global.set(\"minaltid\", a[4]);\n            }\n        }\n\n\n    }\n}\nmsg.payload = newPayload;\n\nreturn msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 896.6666666666666,
        "y": 420,
        "wires": [
            [
                "6bce7acff41f71a8"
            ]
        ]
    },
    {
        "id": "fa08af06dccdbf38",
        "type": "delay",
        "z": "86234d68f0551624",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "da1e2904ccc9a40b",
                "14d879b3abc03224"
            ]
        ]
    },
    {
        "id": "f2fbc025d89467ab",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "",
        "server": "08e70aa346915575",
        "version": 2,
        "debugenabled": false,
        "outputs": 2,
        "entityType": "switch",
        "config": [
            {
                "property": "name",
                "value": "Reset F24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            },
            {
                "property": "last_reset",
                "value": ""
            }
        ],
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 330,
        "y": 760,
        "wires": [
            [
                "96a3923d49557d91",
                "4852c7cceeb80c9f"
            ],
            [
                "a065a19933e2c229"
            ]
        ]
    },
    {
        "id": "4852c7cceeb80c9f",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "top",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 720,
        "wires": []
    },
    {
        "id": "a065a19933e2c229",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "bottom",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 394,
        "y": 822,
        "wires": []
    },
    {
        "id": "59f594537b94e98a",
        "type": "file in",
        "z": "0b5e95fcc23cd134",
        "name": "Read Flow Files",
        "filename": "/home/red/.node-red/projects/NR_F24/ff24_lows.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 410,
        "y": 500,
        "wires": [
            [
                "c59c28e395a11ae2"
            ]
        ]
    },
    {
        "id": "c59c28e395a11ae2",
        "type": "json",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 500,
        "wires": [
            [
                "0ba50b57eafa855f"
            ]
        ]
    },
    {
        "id": "0ba50b57eafa855f",
        "type": "function",
        "z": "0b5e95fcc23cd134",
        "name": "Parse into indiviual files",
        "func": "let flows=msg.payload;\nlet tabs = flows.filter(el => el[\"type\"] === \"tab\");\nlet out=[];\ntabs.forEach(el => {\n    let id = el[\"id\"];\n    let re = / /g;\n    let lab = el[\"label\"].replace(re, \"_\") + \".json\";\n    let members = flows.filter(mem => mem[\"z\"] === id);\n    members.unshift(el);\n     let m={\"filename\":\"/home/red/.node-red/projects/NR_F24/\" +lab,\n               \"payload\":JSON.stringify(members)\n               }               ;\n     out.push(m);\n});\nreturn [out];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "ca82223793d83012"
            ]
        ]
    },
    {
        "id": "2e3d66e7ee665b80",
        "type": "debug",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 500,
        "wires": []
    },
    {
        "id": "06accbe91a65d77a",
        "type": "inject",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "59f594537b94e98a"
            ]
        ]
    },
    {
        "id": "ca82223793d83012",
        "type": "file",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "2e3d66e7ee665b80"
            ]
        ]
    },
    {
        "id": "5fea691c110a7083",
        "type": "catch",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "c1f0153e986b78cc"
            ]
        ]
    },
    {
        "id": "c1f0153e986b78cc",
        "type": "debug",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 700,
        "wires": []
    }
]