[
    {
        "id": "86234d68f0551624",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08e70aa346915575",
        "type": "server",
        "name": "Home Assistant",
        "version": 2,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30"
    },
    {
        "id": "468add020484d2cc",
        "type": "tcp in",
        "z": "86234d68f0551624",
        "name": "",
        "server": "client",
        "host": "192.168.0.112",
        "port": "30003",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "base64": false,
        "x": 730,
        "y": 400,
        "wires": [
            [
                "46899c15ba4a191d"
            ]
        ]
    },
    {
        "id": "06098624bb31532e",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 380,
        "wires": []
    },
    {
        "id": "46899c15ba4a191d",
        "type": "function",
        "z": "86234d68f0551624",
        "name": "",
        "func": "const choices=[\"MSG\",\"SEL\",\"ID\",\"AIR\",\"STA\",\"CLK\"];\nconst counts ={\n    \"MSG\":0,\n    \"SEL\":0,\n    \"ID\":0,\n    \"AIR\":0,\n    \"STA\":0,\n    \"CLK\":0\n}\nlet st=[];\nconst status= {\n          }\n    \nlet newPayload=\"\";\nlet accum=global.get(\"counts\")||counts;\nmsg.data=[];\nconst onlyUnique= (value, index, self)=> self.indexOf(value) === index;\nlet b=msg.payload.split(\"\\n\");\nfor ( const element of b){\n \n  let a=element.split(\",\");\n\n  let types=global.get(\"types\")||[];\n  if(choices.indexOf(a[0])>=0) {\n    types.push(a[0]);\n    accum[a[0]]++;\n    global.set(\"counts\",accum);\n  }\n  let unique=types.filter(onlyUnique);\n  global.set(\"types\",unique);\n  if(a[0]===\"MSG\"){\n    let mtypes=global.get(\"mtypes\")||[];\n    mtypes.push(a[1]);\n    let unm=mtypes.filter(onlyUnique);\n    global.set(\"mtypes\",unm);\n  }\n  if(a[0]===\"STA\"){\n      let stat=global.get(\"status\")||status;\n     if(stat[a[10]]){\n          stat[a[10]]++;\n     }else{\n         stat[a[10]]=1\n     }\n    global.set(\"status\",stat)\n    newPayload=element;\n  }\n   if((a[0]===\"ID\")||(a[0]==='ID')||(a[0]==='AIR')){\n    newPayload=element;\n       \n   }\n   if(a[0]===\"AIR\"){\n       let aircraft=global.get(\"aircraft\")||[];\n       aircraft.push(a[4]);\n       let ac=aircraft.filter(onlyUnique);\n       global.set(\"aircraft\",ac);\n       newPayload=\"found >\"+a[4]+\"< \"+ a.length+\" \" + a;\n   }\n   if((a[0]===\"STA\") ){\n       let aircraft=global.get(\"aircraft\")||[];\n       newPayload=a[4];\n       let i=aircraft.indexOf(a[4]);\n       if(i>=0){\n           let removed=global.get(\"removed\")||[];\n           removed.push(a[4]);\n           global.set(\"removed\",removed);\n           aircraft.splice(i,1);\n           global.set(\"aircraft\",aircraft);\n           newPayload=a[4]+\" removed \"+aircraft.length +\" remaining\";\n       }else{\n           newPayload=\">\"+a[4]+\"< not found with STA of >\"+a[10]+\"<\"+a;\n       }\n   }\n   if((a[0]===\"MSG\") && (a[1]==3)){\n       let distance=global.get(\"getDistance\",\"file\")(a[14],a[15]);\n       let maxDistance=global.get(\"maxDistance\")||0;\n       let minDistance=global.get(\"minDistance\")||1000000;\n     if(distance>maxDistance){\n         global.set(\"latitude\",a[14]);\n         global.set(\"longitude\",a[15]);\n     }\n     \n       maxDistance=Math.max(maxDistance,distance);\n       minDistance=Math.min(minDistance,distance);\n       global.set(\"maxDistance\",maxDistance);\n       global.set(\"minDistance\",minDistance);\n   }\n   if((a[0]===\"MSG\") && (a[1]==5)){\n       let altitude=a[11];\n       if(altitude<0){\n           altitude=0;\n       }\n       let maxAltitude=global.get(\"maxAltitude\")||0;\n       let minAltitude=global.get(\"minAltitude\")||1000000;\n       maxAltitude=Math.max(maxAltitude,altitude);\n       minAltitude=Math.min(minAltitude,altitude);\n       global.set(\"maxAltitude\",maxAltitude);\n       global.set(\"minAltitude\",minAltitude);\n   }\n}\nmsg.payload=newPayload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 420,
        "wires": [
            [
                "443558f94c7cf2e1"
            ]
        ]
    },
    {
        "id": "443558f94c7cf2e1",
        "type": "switch",
        "z": "86234d68f0551624",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "regex",
                "v": "(.)*found(.)*",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "(.)*distance(.)*",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "b0d0fa6ebb5a5201"
            ],
            [
                "06098624bb31532e"
            ],
            [
                "e49a493ed6c58f52"
            ]
        ]
    },
    {
        "id": "b0d0fa6ebb5a5201",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 340,
        "wires": []
    },
    {
        "id": "365132b6c7a63359",
        "type": "catch",
        "z": "86234d68f0551624",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "d4a9d0d7ff732471"
            ]
        ]
    },
    {
        "id": "d4a9d0d7ff732471",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 620,
        "wires": []
    },
    {
        "id": "76700d7db1da7d87",
        "type": "ha-entity",
        "z": "86234d68f0551624",
        "name": "F24Tracked",
        "server": "08e70aa346915575",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "f24"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": "mdi:airplane"
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "aircraft.length",
        "stateType": "global",
        "attributes": [
            {
                "property": "maxDistance",
                "value": "maxDistance",
                "valueType": "global"
            },
            {
                "property": "minDistance",
                "value": "minDistance",
                "valueType": "global"
            },
            {
                "property": "minAltitude",
                "value": "minAltitude",
                "valueType": "global"
            },
            {
                "property": "maxAltitude",
                "value": "maxAltitude",
                "valueType": "global"
            },
            {
                "property": "latitude",
                "value": "latitude",
                "valueType": "global"
            },
            {
                "property": "longitude",
                "value": "longitude",
                "valueType": "global"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 1050,
        "y": 880,
        "wires": [
            [
                "921b980860da849b"
            ]
        ]
    },
    {
        "id": "56b081c1f900419d",
        "type": "inject",
        "z": "86234d68f0551624",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 880,
        "wires": [
            [
                "76700d7db1da7d87"
            ]
        ]
    },
    {
        "id": "921b980860da849b",
        "type": "delay",
        "z": "86234d68f0551624",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 1060,
        "wires": [
            [
                "76700d7db1da7d87"
            ]
        ]
    },
    {
        "id": "86a3015c5e4be605",
        "type": "function",
        "z": "86234d68f0551624",
        "name": "",
        "func": "getDistance = (ilat2,ilon2)=>{  \n  const deg2rad=(deg) => deg * (Math.PI/180);\n  const  getDistanceFromLatLon = (lat1,lon1,lat2,lon2)=> {\n    const  R = 6371*0.621371; // Radius of the earth in miles\n  // msg.R=R;\n   const dLat = deg2rad(lat2-lat1);  // deg2rad below\n  // msg.dLat=dLat;\n   const  dLon = deg2rad(lon2-lon1); \n  // msg.dLon=dLon;\n   const a =  Math.sin(dLat/2) * Math.sin(dLat/2) +  Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *   Math.sin(dLon/2) * Math.sin(dLon/2)  ; \n//msg.a=a;\nconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n//msg.c=c;\nreturn R * c; \n   }\nconst ilat1=38.0056;\nconst ilon1=-105.361;\nreturn getDistanceFromLatLon(ilat1,ilon1,ilat2,ilon2)\n}\n\nglobal.set(\"getDistance\",getDistance,\"file\");\n\n\nmsg.payload=global.get(\"getDistance\",\"file\")(38,-105);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "663c30326ef2f8a6"
            ]
        ]
    },
    {
        "id": "5964b9c24ffd8caa",
        "type": "inject",
        "z": "86234d68f0551624",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 342,
        "y": 716,
        "wires": [
            [
                "86a3015c5e4be605"
            ]
        ]
    },
    {
        "id": "e49a493ed6c58f52",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 500,
        "wires": []
    },
    {
        "id": "663c30326ef2f8a6",
        "type": "debug",
        "z": "86234d68f0551624",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 700,
        "wires": []
    }
]